@model Loginapplication.Models.SiteSettings

@{
    ViewBag.Title = "AddEditSettings";
}

<script src="~/Scripts/jscolor.js"></script>
<style>
    .autocomplete {
        /*the container must be positioned relative:*/
        /*position: relative;
        display: inline-block;*/
    }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            .autocomplete-items div:hover {
                /*when hovering an item:*/
                background-color: #e9e9e9;
            }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>

@using (Html.BeginForm("SiteSetting", "Utility", FormMethod.Post, new { id = "myForm", enctype = "multipart/form-data" , autocomplete ="off"}))
{
    @Html.AntiForgeryToken()


<div class="container">
    <h5 class="text-center pt-4 text-primary font-weight-bold">Add Edit Site Settings</h5>
    <br />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(m => m.SettingsID)

    <div class="row">
        <div class="col-md-4">
            <div class="form-group md-form">
                @Html.LabelFor(model => model.SettingName, htmlAttributes: new { @for = "txtname" })
                @Html.EditorFor(model => model.SettingName, new { htmlAttributes = new { @class = "form-control character", @id = "txtname", @maxlength = 20 } })
                @Html.ValidationMessageFor(model => model.SettingName, "", new { @class = "text-danger" })

            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group md-form">
                @Html.LabelFor(model => model.ApplicationTitle, htmlAttributes: new { @for = "txtappname" })
                @Html.EditorFor(model => model.ApplicationTitle, new { htmlAttributes = new { @class = "form-control character", @id = "txtappname", @maxlength = 50 } })
                @Html.ValidationMessageFor(model => model.ApplicationTitle, "", new { @class = "text-danger" })

            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group autocomplete md-form">
                @Html.LabelFor(model => model.ApplicationTitleFont, htmlAttributes: new { @for = "txtfontname" })
                @Html.EditorFor(model => model.ApplicationTitleFont, new { htmlAttributes = new { @class = "form-control character", @id = "txtfontname", @maxlength = 50 } })
                @Html.ValidationMessageFor(model => model.ApplicationTitleFont, "", new { @class = "text-danger" })

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 ">
            <div class="form-group md-form">
                @Html.LabelFor(model => model.ApplicationTitleSize, htmlAttributes: new { @for = "txtfontsize" })
                @Html.EditorFor(model => model.ApplicationTitleSize, new { htmlAttributes = new { @class = "form-control character onlynum", @id = "txtfontsize", @maxlength = 3 } })
                @Html.ValidationMessageFor(model => model.ApplicationTitleSize, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group md-form">
                @Html.LabelFor(model => model.ApplicationTitleColour, htmlAttributes: new { @for = "txtappcolour" })
                @Html.EditorFor(model => model.ApplicationTitleColour, new { htmlAttributes = new { @class = "form-control jscolor {required:false} character", @id = "txtappcolour", @maxlength = 50 } })
                @Html.ValidationMessageFor(model => model.ApplicationTitleColour, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group md-form">
                @Html.LabelFor(model => model.MenuColour, htmlAttributes: new { @for = "txtmenucolour" })
                @Html.EditorFor(model => model.MenuColour, new { htmlAttributes = new { @class = "form-control jscolor {required:false} character", @id = "txtmenucolour", @maxlength = 50 } })
                @Html.ValidationMessageFor(model => model.MenuColour, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group md-form">
                @Html.LabelFor(model => model.MenuTextColour, htmlAttributes: new { @for = "txtmenutextcolour" })
                @Html.EditorFor(model => model.MenuTextColour, new { htmlAttributes = new { @class = "form-control jscolor {required:false} character", @id = "txtmenutextcolour", @maxlength = 50 } })
                @Html.ValidationMessageFor(model => model.MenuTextColour, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group md-form">
                @Html.LabelFor(model => model.NavColour, htmlAttributes: new { @for = "txtnavcolour" })
                @Html.EditorFor(model => model.NavColour, new { htmlAttributes = new { @class = "form-control jscolor {required:false} character", @id = "txtnavcolour", @maxlength = 50 } })
                @Html.ValidationMessageFor(model => model.NavColour, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group md-form">
                @Html.LabelFor(model => model.NavTextColour, htmlAttributes: new { @for = "txtnavtextcolour" })
                @Html.EditorFor(model => model.NavTextColour, new { htmlAttributes = new { @class = "form-control jscolor {required:false} character", @id = "txtnavtextcolour", @maxlength = 50 } })
                @Html.ValidationMessageFor(model => model.NavTextColour, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    


    <div class="row">
        <div class="col-md-4">

            <div class="btn btn-primary">
                @Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "", @type = "file", @id = "imageBrowes" } })
                @*<input type="file" id="imageBrowes" name="imageBrowes"  />*@
            </div>
        </div>
        @*<div class="col-md-6">
            <div id="imgPreview" class="thumbnail" style="display:none">
                <img class="thumbnail img-responsive"  height="80" width="80" id="targetImg" />
                <div class="caption">
                    <a href="#" onclick="ClearPreview()"><i class="fa fa-trash"></i></a>
                    <span id="description"></span>
                </div>
            </div>

        </div>*@

        @if (ViewBag.img != null)
        {
            <div class="col-md-2 col-xs-6" id="uploadedImage">
                <img title="Uploaded Image" src="@(ViewBag.filepath)" class="img-thumbnail border border-primary rounded shadow-sm bg-white" alt="@(ViewBag.filepath)" />
                <figcaption>@(ViewBag.filepath)</figcaption>
            </div>
        }



        

    </div>
    <br />


    <br />
    <div class="text-center">
        <button type="submit" name="btnSubmit" id="btnSubmit"  class="btn btn-primary btn-md">Submit</button>
        <button type="button" name="btnCancel" class="btn btn-primary btn-md" onclick="location.href='/Utility/SiteSetting'">Cancel</button>
    </div>

    <br />

</div>
}


<script src="~/Scripts/jquery-3.3.1.min.js"></script>

<script>

    $(document).ready(function () {

        $("#imageBrowes").change(function () {

            var File = this.files;
            if (File && File[0]) {
                ReadImage(File[0]);
            }

            $("#uploadedImage").hide();

        });

        if ($('#imageBrowes').val()) {
            alert('has img');
        }

        autocomplete(document.getElementById("txtfontname"), fonts);

    });


    $("#btnSubmit").click(function () {

        var fd = new FormData();
        var file_data = $('input[type="file"]')[0].files; 
        //for (var i = 0; i < file_data.length; i++) {              // for multiple files
        //    fd.append("file_" + i, file_data[i]);
        //}
        fd.append("imageFile", file_data[0]);
        var other_data = $('#myForm').serializeArray();
        $.each(other_data, function (key, input) {
            fd.append(input.name, input.value);
        });


        $.ajax({
            url: '/Utility/AddEditSettings',
            data: fd,
            contentType: false,
            processData: false,
            type: 'POST',
            success: function (data) {
                //console.log(data);
            }
        });

      
    });
    var ReadImage = function (file) {

        var reader = new FileReader;
        var image = new Image;

        reader.readAsDataURL(file);
        reader.onload = function (_file) {

            image.src = _file.target.result;
            image.onload = function () {

                var height = this.height;
                var width = this.width;
                var type = file.type;
                var size = ~~(file.size / 1024) + "KB";

                $("#targetImg").attr('src', _file.target.result);
                $("#description").text("Size:" + size + ", " + height + "X " + width + ", " + type + "");
                $("#imgPreview").show();

            };

        };

    };

    var ClearPreview = function () {
        $("#imageBrowes").val('');
        $("#description").text('');
        $("#imgPreview").hide();

    };
    var fonts = ["Arial","Arial Black", "Calibri", "Tahoma", "Papyrus", "Times New Roman", "Courier New", "Trebuchet MS", "Verdana",
        "Impact", "Comic Sans MS", "Georgia","Palatino Linotype"];
   

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}